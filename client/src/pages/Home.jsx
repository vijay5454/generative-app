import { useEffect, useState } from "react";
import { Loader, Card } from "../components";

const Home = () => {
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState(null);
  const [searchText, setSearchText] = useState("");
  const [searchedResults, setSearchedResults] = useState(null);
  const [searchTimeout, setSearchTimeout] = useState(null);
  const RenderCards = ({ data, title }) => {
    if (data?.length > 0) {
      return data.map((post) => {
        return <Card key={post._id} {...post} />;
      });
    }
    return (
      <h2 className="text-[#6469ff] font-bold text-xl uppercase mt-5">
        {title}
      </h2>
    );
  };
  const handleSearchChange = (e) => {
    clearTimeout(searchTimeout);
    setSearchText(e.target.value);
    setSearchTimeout(
      setTimeout(() => {
        const searchResults = allPosts.filter((post) => {
          return (
            post.name.toLowerCase().includes(searchText.toLowerCase()) ||
            post.prompt.toLowerCase().includes(searchText.toLowerCase())
          );
        });
        setSearchedResults(searchResults);
      }, 500)
    );
  };
  const fetchPosts = async () => {
    setLoading(true);
    try {
      const response = await fetch("http://localhost:8080/api/v1/post", {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });
      if (response.ok) {
        const result = await response.json();
        setAllPosts(result.data.reverse());
      }
    } catch (error) {
      alert(error);
    } finally {
      setLoading(false);
    }
  };
  useEffect(() => {
    fetchPosts();
  }, []);
  return (
    <section className="max-w-7xl mx-auto">
      <div>
        <h1 className="font-extrabold text-3xl">The Community Showcase</h1>
        <p className="mt-2 text-[#666e75] max-w-3xl">
          Browse through the collection of imaginative and visually stunning
          images generated by DALL-E AI
        </p>
      </div>
      <div className="mt-14">
        <label className="mb-3 block">Search posts</label>
        <input
          onChange={handleSearchChange}
          value={searchText}
          name="SearchField"
          className="bg-gray-50 p-3 block w-full border border-gray-300 text-gray-900 text-sm rounded-lg ring-1 focus:ring-[#6465ff] outline-none focus:border-[#6465ff]"
        />
      </div>
      <div className="mt-10">
        {loading ? (
          <div className="flex justify-center items-center">
            <Loader />
          </div>
        ) : (
          <>
            {searchText && (
              <h2 className="text-xl mb-3 font-medium text-[#666e75]">
                Showing result for{" "}
                <span className="text-[#222328]">{searchText}</span>
              </h2>
            )}
            <div className="grid grid-cols-1 xs:grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-3">
              {searchText ? (
                <RenderCards
                  data={searchedResults}
                  title="No Search results found"
                />
              ) : (
                <RenderCards data={allPosts} title="No posts Found" />
              )}
            </div>
          </>
        )}
      </div>
    </section>
  );
};

export default Home;
